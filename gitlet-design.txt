Gitlet Design Document
----------------------


Classes and Data Structures
---------------------------

**** Commit ****

Comprises log messages , other metadata (commit date, author, etc.), a reference to a tree, and references to parent commits.
The repository also maintains a mapping from branch heads to references to commits, so that certain important commits have symbolic names.

** Fields **

1. HashMap<String, Blob[]> _commitBlobsMap: A mapping of file names (Commit id) to array of blobs.
2. String[] _parentsID: List of ID of parents of the commit (There can only be 2 parents in Gitlet). This will be used for merges.
3. Metadata _meta: Metadata of the commit, consisting only of a timestamp, log message, and unique SHA-1 ID.
4. String _id: Unique ID generated by SHA-1. Differentiated from other object types by their 4-character ending "comm" (for commit).

**** Metadata ****

Meta data of Commit. Consists only of a timestamp and log message.

** Fields **

1. String _logMessage: Log message of the commit that I supply.
2. String _timestamp: Timestamp of the commit.

**** Blob ****

The contents of files.

** Fields **

1. String _id: Unique ID generated by SHA-1 which serves as the file name, differentiating one blob from other object types by their 4-character ending "blob".
2. File _content: Content of this blob.
3. String _fileName: Name of file.

Algorithms
----------

**** Main ****

1. void doInit(String[] args): Creates a new Gitlet version-control system in the current directory. This system will automatically start with one commit. It will have a single branch: master, which initially points to this initial commit, and master will be the current branch. The timestamp for this initial commit will be 00:00:00 UTC, Thursday, 1 January 1970. All repositories will automatically share this commit.
2. void doAdd(String[] args): Adds a copy of the file as it currently exists to the staging area.  The staging area should be somewhere in .gitlet. If the current working version of the file is identical to the version in the current commit, do not stage it to be added, and remove it from the staging area if it is already there. If the file had been marked to be removed (gitlet rm), delete that mark.
3. void doCommit(String[] args): Saves a snapshot of certain files in the current commit and staging area so they can be restored at a later time, creating a new commit. The commit is said to be tracking the saved files. By default, each commit's snapshot of files will be exactly the same as its parent commit's snapshot of files; it will keep versions of files exactly as they are, and not update them. A commit will only update files it is tracking that have been staged at the time of commit, in which case the commit will now include the version of the file that was staged instead of the version it got from its parent. A commit will save and start tracking any files that were staged but weren't tracked by its parent. Finally, files tracked in the current commit may be untracked in the new commit as a result of the rm command.
4. void doRm(String[] args): Unstage the file if it is currently staged. If the file is tracked in the current commit, mark it to indicate that it is not to be included in the next commit, and remove the file from the working directory if the user has not already done so.
5. void doLog(String[] args): Starting at the current head commit, display information about each commit backwards along the commit tree until the initial commit, following the first parent commit links, ignoring any second parents found in merge commits.
6. void doGlobalLog(String[] args): Like log, except displays information about all commits ever made. The order of the commits does not matter.
7. void doFind(String[] args): Prints out the ids of all commits that have the given commit message, one per line. If there are multiple such commits, it prints the ids out on separate lines. The commit message is a single operand; to indicate a multiword message, put the operand in quotation marks, as for the commit command.
8. void doStatus(String[] args): Displays what branches currently exist, and marks the current branch with a *. Also displays what files have been staged or marked for untracking. An example of the exact format it should follow is as follows.
9. void doCheckout(String[] args):
10. void doBranch(String[] args): Creates a new branch with the given name, and points it at the current head node. A branch is nothing more than a name for a reference (a SHA-1 identifier) to a commit node. This command does NOT immediately switch to the newly created branch (just as in real Git).
11. void doRmBranch(String[] args): Deletes the branch with the given name. This only means to delete the pointer associated with the branch; it does not mean to delete all commits that were created under the branch, or anything like that.
12. void doReset(String[] args): Checks out all the files tracked by the given commit. Removes tracked files that are not present in that commit. Also moves the current branch's head to that commit node. See the intro for an example of what happens to the head pointer after using reset. The [commit id] may be abbreviated as for checkout. The staging area is cleared. The command is essentially checkout of an arbitrary commit that also changes the current branch head.
13. void doMerge(String[] args): Merges files from the given branch into the current branch.


Persistence
-----------
