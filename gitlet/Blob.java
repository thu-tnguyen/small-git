package gitlet;

import java.io.File;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashSet;

import static gitlet.Utils.*;
import static gitlet.MainUtils.*;

/** Essentially the contents of files.
 *  @author Thu Nguyen
 **/
public class Blob implements Serializable {
    /** Unique ID generated by SHA-1 which serves as the file name,
     *  differentiating one blob from other object types by their
     *  (ID - UID_LENGTH)-character beginning [_FILENAME]. */
    private String _id;
    /** Content of this blob. */
    private File _content;
    /** Name of file. */
    private String _fileName;

    /** Construct a Blob object, contains pointer to CONTENT, FILENAME,
     *  unique Blob ID serialized using ONLY the content. Write
     *  variables out to .gitlet/objects/[ID].txt:
     *  Inside the file is [CONTENT]. */
    public Blob(String fileName, File content) {
        _fileName = fileName;
        _content = content;
        String readContent = readContentsAsString(content);
        _id = fileName + sha1(readContent);
        writeContents(join(OBJECTS_DIR.toString(), _id),
                readContent);
    }

    /** Return the blob's file name. */
    public String getFileName() {
        return _fileName;
    }

    /** Return the blob's ID. */
    public String getID() {
        return _id;
    }

    /** Return blob from its full ID. Return null if blob does not exist.*/
    static File getBlobFile(String id) {
        if (Files.exists(Paths.get(OBJECTS_DIR.toString(), id))) {
            return join(OBJECTS_DIR.toString(), id);
        }
        return null;
    }

    /** Return the file name of the blob using ID. */
    static String getBlobFileName(String id) {
        return id.substring(0, id.length() - UID_LENGTH);
    }

    /** Return whether the ID is a blob's ID. */
    static boolean isBlobId(String id) {
        return id.substring(0, 5).compareTo("comm_") != 0;
    }

    /** Return HashSet of file names within an array of BLOBIDS. */
    static HashSet<String> getBlobsName(String[] blobIDs) {
        HashSet<String> blobsName = new HashSet<>();
        for (String blobId : blobIDs) {
            blobsName.add(getBlobFileName(blobId));
        }
        return blobsName;
    }
}
